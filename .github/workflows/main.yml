name: Release NodeGL

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_tag.outputs.version }}
      version_nov: ${{ steps.get_tag.outputs.version_nov }}
    steps:
      - id: get_tag
        run: |
          echo "version=${GITHUB_REF##*/}" >> $GITHUB_OUTPUT
          echo "version_nov=${GITHUB_REF##*/v}" >> $GITHUB_OUTPUT
          
  publish_npm:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Create dummy package.json (if not present)
        run: |
          if [ ! -f package.json ]; then
            echo '{
              "name": "NodeGL",
              "version": "${{ needs.setup.outputs.version_nov }}",
              "description": "Generative graphical music score tool",
              "main": "index.cjs",
              "license": "MIT",
              "publishConfig": {
                "registry": "https://registry.npmjs.org/"
              },
              "scripts": {
                "start": "node index.cjs"
              }
            }' > package.json
            echo 'console.log("NodeGL CLI Placeholder");' > index.cjs
          fi
      - name: Publish to npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "//registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}" > ~/.npmrc
          npm publish --access public || echo "No valid npm package to publish. Skipping."
  finalize_release:
    needs: [publish_npm]
    runs-on: ubuntu-latest
    steps:
      - name: Final release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.setup.outputs.version }}
          name: "NodeGL ${{ needs.setup.outputs.version }}"
          body: |
            âœ… Automated multi-platform release of Node.js:
            - ðŸ“¦ npm Package (npmjs.com)
          draft: false
